import React, { useState } from 'react';

function ChatBoxComponent() {
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (inputMessage.trim()) {
      setMessages((prevMessages) => [...prevMessages, { text: inputMessage, type: 'user' }]);
      setInputMessage('');

      const botResponse = 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i tin nh·∫Øn. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.';
      setMessages((prevMessages) => [...prevMessages, { text: botResponse, type: 'bot' }]);
    }
  };

  const handleAutoQuestionClick = (question) => {
    setMessages((prevMessages) => [...prevMessages, { text: question, type: 'user' }]);
    
    let botResponse;
    switch (question) {
      case 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n?':
        botResponse = 'ƒê·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n, b·∫°n h√£y nh·∫•p v√†o n√∫t "ƒêƒÉng k√Ω" ·ªü g√≥c ph·∫£i tr√™n c√πng v√† ƒëi·ªÅn th√¥ng tin c·∫ßn thi·∫øt.';
        break;
      case 'Th·ªùi gian giao h√†ng d·ª± ki·∫øn l√† bao l√¢u?':
        botResponse = 'Th·ªùi gian giao h√†ng d·ª± ki·∫øn l√† t·ª´ 3-5 ng√†y l√†m vi·ªác t√πy v√†o ƒë·ªãa ch·ªâ giao h√†ng c·ªßa b·∫°n.';
        break;
      case 'S·∫£n ph·∫©m n√†y c√≥ ch√≠nh s√°ch ƒë·ªïi tr·∫£ kh√¥ng?':
        botResponse = 'C√≥, ch√∫ng t√¥i √°p d·ª•ng ch√≠nh s√°ch ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng. Vui l√≤ng ƒë·ªçc chi ti·∫øt tr√™n trang "Ch√≠nh s√°ch ƒë·ªïi tr·∫£".';
        break;
      case 'H√¨nh th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n?':
        botResponse = 'Ch√∫ng t√¥i ch·∫•p nh·∫≠n c√°c h√¨nh th·ª©c thanh to√°n qua th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng, v√† thanh to√°n khi nh·∫≠n h√†ng (COD).';
        break;
      case 'T√¥i c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng ·ªü ƒë√¢u?':
        botResponse = 'B·∫°n c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng trong m·ª•c "ƒê∆°n h√†ng c·ªßa t√¥i" sau khi ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n.';
        break;
      default:
        botResponse = 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i c√¢u h·ªèi. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.';
    }
  
    setMessages((prevMessages) => [...prevMessages, { text: botResponse, type: 'bot' }]);
  };

  const autoQuestions = [
    'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n?',
    'Th·ªùi gian giao h√†ng d·ª± ki·∫øn l√† bao l√¢u?',
    'S·∫£n ph·∫©m n√†y c√≥ ch√≠nh s√°ch ƒë·ªïi tr·∫£ kh√¥ng?',
    'H√¨nh th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n?',
    'T√¥i c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng ·ªü ƒë√¢u?'
  ];

  return (
    <div>
      <button
        onClick={() => setIsChatOpen((prev) => !prev)}
        style={{
          position: 'fixed',
          bottom: '20px',
          right: '20px',
          backgroundColor: '#007bff',
          color: 'white',
          border: 'none',
          borderRadius: '50%',
          width: '60px',
          height: '60px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '28px',
          cursor: 'pointer',
          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',
          zIndex: 1000,
          transition: 'transform 0.2s',
        }}
        onMouseOver={(e) => {
          e.currentTarget.style.transform = 'scale(1.05)';
        }}
        onMouseOut={(e) => {
          e.currentTarget.style.transform = 'scale(1)';
        }}
      >
        üí¨
      </button>

      {isChatOpen && (
        <div style={{
          position: 'fixed',
          bottom: '80px',
          right: '20px',
          width: '400px',
          maxHeight: '500px',
          border: '1px solid #ccc',
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
          display: 'flex',
          flexDirection: 'column',
          zIndex: 1001,
          overflow: 'hidden'
        }}>
          <div style={{
            backgroundColor: '#007bff',
            color: 'white',
            padding: '12px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <h4 style={{ margin: 0, color: 'white',  alignItems: 'center' }}>HasagiShopFashion</h4>
            <button onClick={() => setIsChatOpen(false)} style={{
              background: 'none',
              border: 'none',
              color: 'white',
              fontSize: '24px',
              cursor: 'pointer'
            }}>‚úñ</button>
          </div>
          <div style={{
            flex: '1',
            padding: '10px',
            overflowY: 'auto',
            display: 'flex',
            flexDirection: 'column',
            gap: '10px'
          }}>
            {messages.map((msg, index) => (
              <div key={index} style={{
                alignSelf: msg.type === 'user' ? 'flex-end' : 'flex-start',
                backgroundColor: msg.type === 'user' ? '#007bff' : '#f1f1f1',
                color: msg.type === 'user' ? 'white' : 'black',
                borderRadius: '5px',
                padding: '10px',
                maxWidth: '100%',
                wordWrap: 'break-word',
                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
                transition: 'background-color 0.3s',
              }}>
                {msg.text}
              </div>
            ))}
            <div style={{
              marginTop: '10px',
              display: 'flex',
              flexDirection: 'column',
              gap: '5px'
            }}>
              {autoQuestions.map((question, index) => (
                <button key={index} onClick={() => handleAutoQuestionClick(question)} style={{
                  backgroundColor: '#007bff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '5px',
                  padding: '10px',
                  cursor: 'pointer',
                  transition: 'background-color 0.3s',
                  marginTop: '5px'
                }}
                  onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#0056b3'}
                  onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#007bff'}
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
          <form onSubmit={handleSendMessage} style={{
            display: 'flex',
            padding: '10px',
            borderTop: '1px solid #ccc',
            backgroundColor: '#f9f9f9'
          }}>
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              style={{
                flex: '1',
                padding: '10px',
                border: '1px solid #ccc',
                borderRadius: '5px',
                marginRight: '10px',
                transition: 'border-color 0.3s',
                outline: 'none',
              }}
              onFocus={(e) => e.currentTarget.style.borderColor = '#007bff'}
              onBlur={(e) => e.currentTarget.style.borderColor = '#ccc'}
            />
            <button type="submit" style={{
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              padding: '10px 15px',
              cursor: 'pointer',
              transition: 'background-color 0.3s',
            }}
            onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#0056b3'}
            onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#007bff'}
            >
              G·ª≠i
            </button>
          </form>
        </div>
      )}
    </div>
  );
}

export default ChatBoxComponent;
